{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "doppi",
  "scopeName": "source.doppi",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#entity"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.doppi",
          "match": "\\b(yarat|toki|takrorla|qaytar|funksiya|doim|chiqar|agar|aks|kirit|massiv_uzunligi|tur|vaqt|holat|matematik|tanla|odatiy|toxtatish)\\b"
        },
        {
          "name": "keyword.operator.arrow.doppi",
          "match": "->"
        },
        {
          "name": "keyword.operator.pipe.doppi",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.splat.doppi",
          "match": "\\.\\."
        },
        {
          "name": "keyword.operator.comparison.float.doppi",
          "match": "(<=\\.|>=\\.|==\\.|!=\\.|<\\.|>\\.)"
        },
        {
          "name": "keyword.operator.comparison.int.doppi",
          "match": "(<=|>=|==|!=|<|>)"
        },
        {
          "name": "keyword.operator.logical.doppi",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "keyword.operator.other.doppi",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.arithmetic.float.doppi",
          "match": "(\\+\\.|\\-\\.|/\\.|\\*\\.|%\\.)"
        },
        {
          "name": "keyword.operator.arithmetic.int.doppi",
          "match": "(\\+|\\-|/|\\*|%)"
        },
        {
          "name": "keyword.operator.assignment.doppi",
          "match": ":="
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.doppi",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.doppi",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.doppi",
          "match": "//.*"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "include": "#binary_number"
        },
        {
          "include": "#octal_number"
        },
        {
          "include": "#hexadecimal_number"
        },
        {
          "include": "#decimal_number"
        },
        {
          "include": "#boolean"
        },
        {
          "name": "entity.name.type.osm",
          "match": "[A-Z][\\w]*"
        }
      ]
    },
    "binary_number": {
      "name": "constant.numeric.binary.doppi",
      "match": "\\b0b[01]+\\b"
    },
    "octal_number": {
      "name": "constant.numeric.octal.doppi",
      "match": "\\b0o[0-7]+\\b"
    },
    "decimal_number": {
      "name": "constant.numeric.decimal.doppi",
      "match": "\\b\\d[\\d_]*(\\.\\d*)?\\b"
    },
    "hexadecimal_number": {
      "name": "constant.numeric.hexadecimal.doppi",
      "match": "\\b0x[\\da-fA-F]+\\b"
    },
    "boolean": {
      "name": "constant.language.boolean.doppi",
      "match": "\\b(ha|yoq)\\b"
    },
    "entity": {
      "patterns": [
        {
          "begin": "\\b([a-z][\\w]*)\\s*\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "captures": {
            "1": {
              "name": "entity.name.function.doppi"
            }
          }
        },
        {
          "name": "variable.parameter.doppi",
          "match": "\\b([a-z][\\w]*):\\s"
        },
        {
          "name": "entity.name.namespace.doppi",
          "match": "\\b([a-z][\\w]*):"
        }
      ]
    }
  }
}